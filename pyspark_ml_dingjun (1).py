# -*- coding: utf-8 -*-
"""PySpark_ML_Dingjun.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12cY0XpzdeibjqFMldkARMpAFFLNR4Qcr
"""

!pip install pyspark
from pyspark.sql import SparkSession
spark=SparkSession.builder.appName('Pyspark_Dingjun').getOrCreate()

# The applied options are for CSV files. For other file types, these will be ignored.
df =spark.read.csv('tips.csv',header=True,inferSchema=True)
df.show()

df.printSchema()

df.columns

### Handling Categorical Features
from pyspark.ml.feature import StringIndexer

df.show()

indexer=StringIndexer(inputCol="sex",outputCol="sex_indexed")
df_rdd=indexer.fit(df).transform(df)
df_rdd.show()

indexer=StringIndexer(inputCols=["smoker","day","time"],outputCols=["smoker_indexed","day_indexed",
                                                                  "time_index"])
df_rdd=indexer.fit(df_rdd).transform(df_rdd)
df_rdd.show()

df_rdd.columns

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['tip','size','sex_indexed','smoker_indexed','day_indexed',
                          'time_index'],outputCol="Independent Features")
output=featureassembler.transform(df_rdd)

featureassembler=VectorAssembler(inputCols=['Independent Features'],outputCol='features')
output=featureassembler.transform(output)

output.show()

finalized_data=output.select("Independent Features","total_bill")

finalized_data.show()

from pyspark.ml.regression import LinearRegression
##train test split
train_data,test_data=finalized_data.randomSplit([0.75,0.25])
regressor=LinearRegression(featuresCol='Independent Features', labelCol='total_bill')
regressor=regressor.fit(train_data)

regressor.coefficients

regressor.intercept

### Predictions
pred_results=regressor.evaluate(test_data)

## Final comparison
pred_results.predictions.show()

### PErformance Metrics
pred_results.r2,pred_results.meanAbsoluteError,pred_results.meanSquaredError



"""To Apply Generalized Linear Regression 

"""

finalized_data=output.select("features","total_bill")

finalized_data.show()

glr = GeneralizedLinearRegression(labelCol="total_bill",family="gaussian", link="identity", maxIter=10, regParam=0.3)

(train, test) = finalized_data.randomSplit([0.75, 0.25])

model = glr.fit(train)

from pyspark.ml.evaluation import RegressionEvaluator
tdata = model.transform(test)
tdata.show(3)

rmse = RegressionEvaluator(labelCol="total_bill", predictionCol="prediction", metricName="rmse")
rmse = rmse.evaluate(tdata)
mae = RegressionEvaluator(labelCol="total_bill", predictionCol="prediction", metricName="mae")
mae = mae.evaluate(tdata)
r2 = RegressionEvaluator(labelCol="total_bill", predictionCol="prediction", metricName="r2")
r2 = r2.evaluate(tdata)

print("RMSE: ", rmse)
print("MAE: ", mae)
print("R-squared: ", r2)

import matplotlib.pyplot as plt

x_ax = range(0, tdata.count())
y_pred=tdata.select("prediction").collect()
y_orig=tdata.select("total_bill").collect()
 
plt.plot(x_ax, y_orig, label="original")
plt.plot(x_ax, y_pred, label="predicted")
plt.title("Tips")
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend(loc='best',fancybox=True, shadow=True)
plt.grid(True)
plt.show()

"""*** check some CSV files """

df_health =spark.read.csv('BenefitsCostSharing.csv',header=True,inferSchema=True)
df_health.show()

df_health.printSchema()

df_health.count()

df_salary =spark.read.csv('Salaries.csv',header=True,inferSchema=True)
df_salary.show()

df_salary.count()

df_salary.printSchema()

from pyspark.sql.types import IntegerType
df_salary = df_salary.withColumn("BasePay", df_salary["BasePay"].cast(IntegerType()))
df_salary = df_salary.withColumn("OvertimePay", df_salary["OvertimePay"].cast(IntegerType()))
df_salary = df_salary.withColumn("OtherPay", df_salary["OtherPay"].cast(IntegerType()))
df_salary = df_salary.withColumn("TotalPay", df_salary["TotalPay"].cast(IntegerType()))

df_salary.printSchema()

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['BasePay','OvertimePay','OtherPay'],outputCol="Independent Features")
output=featureassembler.transform(df_salary)

df_salary.show()

output.show()

output.select('Independent Features').show()

finalized_data=output.select("Independent Features","TotalPay")

finalized_data.show()

finalized_data.count()

finalized_data=finalized_data.na.drop(how="any")

""":******************************************************************************

Data analyses of BitstampUSD csv data file using the following two ML methods:
1. Linear Regression
2. Generalized Linear Regression
"""

df_bitcoin =spark.read.csv('bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv',header=True,inferSchema=True)
df_bitcoin.show()

df_bitcoin=df_bitcoin.na.drop(how="any")

df_bitcoin.show()

df_bitcoin.count()

df_bitcoin.printSchema()

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['Open','High', 'Low','Close','Volume_(BTC)','Volume_(Currency)'],outputCol="Independent Features")
output=featureassembler.transform(df_bitcoin)

finalized_data=output.select("Independent Features","Weighted_Price")

finalized_data.show()

from pyspark.ml.regression import LinearRegression
##train test split
train_data,test_data=finalized_data.randomSplit([0.75,0.25])
regressor=LinearRegression(featuresCol='Independent Features', labelCol='Weighted_Price')
regressor=regressor.fit(train_data)

pred_results=regressor.evaluate(test_data)

pred_results.predictions.show()

### PErformance Metrics
pred_results.r2,pred_results.meanAbsoluteError,pred_results.meanSquaredError

"""The following codes try to Generalized Linear Regression for data analyses"""

from pyspark.ml.regression import GeneralizedLinearRegression

# Load training data
dataset = spark.read.csv('bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv',header=True,inferSchema=True)
dataset=dataset.na.drop(how="any")

dataset.show()

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['Open','High', 'Low','Close','Volume_(BTC)','Volume_(Currency)'],outputCol="Independent Features")
output=featureassembler.transform(dataset)


featureassembler=VectorAssembler(inputCols=['Independent Features'],outputCol='features')
output=featureassembler.transform(output)

finalized_data=output.select("features","Weighted_Price")

finalized_data.show()

glr = GeneralizedLinearRegression(labelCol="Weighted_Price",family="gaussian", link="identity", maxIter=10, regParam=0.3)

(train, test) = finalized_data.randomSplit([0.8, 0.2])

model = glr.fit(train)

#glr=GeneralizedLinearRegression(labelCol="Weighted_Price",family="poisson",maxIter=10,regParam=0.3)

#model = glr.fit(train)
 
print("Coefficients: ", model.coefficients)
print("Intercept: ", model.intercept)

print(model.summary)

from pyspark.ml.evaluation import RegressionEvaluator
tdata = model.transform(test)
tdata.show(3)

rmse = RegressionEvaluator(labelCol="Weighted_Price", predictionCol="prediction", metricName="rmse")
rmse = rmse.evaluate(tdata)
mae = RegressionEvaluator(labelCol="Weighted_Price", predictionCol="prediction", metricName="mae")
mae = mae.evaluate(tdata)
r2 = RegressionEvaluator(labelCol="Weighted_Price", predictionCol="prediction", metricName="r2")
r2 = r2.evaluate(tdata)

print("RMSE: ", rmse)
print("MAE: ", mae)
print("R-squared: ", r2)

"""Compared to results generated by linear regression: (0.9999998056829986, 1.5614665206197333, 15.76613153552983)
Conclusion: in RMSE the GLR is better than the LR
"""

import matplotlib.pyplot as plt

x_ax = range(0, tdata.count())
y_pred=tdata.select("prediction").collect()
y_orig=tdata.select("Weighted_Price").collect()
 
plt.plot(x_ax, y_orig, label="original")
plt.plot(x_ax, y_pred, label="predicted")
plt.title("bitstampUSD")
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend(loc='best',fancybox=True, shadow=True)
plt.grid(True)
plt.show()

"""Conclusion: GLR is better than LR. """